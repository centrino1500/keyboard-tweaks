
partial alphanumeric_keys modifier_keys
xkb_symbols "lv5" {
//    name[Group1]= "Extend layer";
//    key.type[group1]="EIGHT_LEVEL"; // (Caps)Lock state not used on these keys
    key.type[group1]="EIGHT_LEVEL_SEMIALPHABETIC"; // Lock affects lv1/5 but not lv3/7 - a bit inflexible but OK I guess

// TODO: If I set lv5-6 of Esc to Caps_Lock, lv1-4 are CapsLock PLUS Esc! Try a LockMods action?
//    key <ESC>  { [ Escape , Escape , Escape , Escape  , Caps_Lock , Caps_Lock ] };
    key <SCLK> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Caps_Lock            , Caps_Lock             , // CapsLock
                   Caps_Lock            , Caps_Lock            ], // CapsLock
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   SetMods(mods=Lock)   , SetMods(mods=Lock)    , // Lock mod for <CAPS>
                   NoAction()           , NoAction()           ]
               };  // ScrollLock

    key <FK01> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioPlay         , XF86AudioPause        ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I208>,clearmods=all), Redirect(key=<I209>,clearmods=all), // <I208>/<I209>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // F01
    key <FK02> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioPrev         , XF86AudioRewind       ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I173>,clearmods=all), Redirect(key=<I176>,clearmods=all), // <I173>/<I176>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // F02
    key <FK03> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioNext         , XF86AudioForward      ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I171>,clearmods=all), Redirect(key=<I216>,clearmods=all), // <I171>/<I216>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // F03
    key <FK04> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioStop         , XF86Eject             ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I174>,clearmods=all), Redirect(key=<I169>,clearmods=all), // <I174>/<I169>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // F04
    key <FK05> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioMute         , XF86Sleep             ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<MUTE>,clearmods=all), Redirect(key=<I150>,clearmods=all), // <MUTE>/<I150>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // F05
    key <FK06> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioLowerVolume  , XF86MonBrightnessDown ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<VOL->,clearmods=all), Redirect(key=<I232>,clearmods=all), // <VOL->/<I232>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // F06
    key <FK07> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioRaiseVolume  , XF86MonBrightnessUp   ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<VOL+>,clearmods=all), Redirect(key=<I233>,clearmods=all), // <VOL+>/<I233>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // F07
    key <FK08> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86AudioMedia        , XF86MyComputer        ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I234>,clearmods=all), Redirect(key=<I165>,clearmods=all), // <I234>/<I165>(‡‡)
                   NoAction()           , NoAction()           ] // What about XF86Terminal? Not in evdev
               };  // F08
    key <FK09> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86HomePage          , XF86WWW               ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I180>,clearmods=all), Redirect(key=<I158>,clearmods=all), // <I180>/<I158>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // F09
    key <FK10> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Search            , XF86Mail              ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I225>,clearmods=all), Redirect(key=<I223>,clearmods=all), // <I225>/<I223>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // F10
    key <FK11> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Explorer          , XF86Launch1           ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I152>,clearmods=all), Redirect(key=<I156>,clearmods=all), // <I152>/<I156>(‡‡)
                   NoAction()           , NoAction()           ] // (in inet(evdev), XF86Launch3 is <I210>)
               };  // F11
    key <FK12> { symbols[Group1]=[ NoSymbol,NoSymbol,NoSymbol,NoSymbol, XF86Calculator        , XF86Launch2           ],
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I148>,clearmods=all), Redirect(key=<I157>,clearmods=all), // <I148>/<I157>(‡‡)
                   NoAction()           , NoAction()           ] // (in inet(evdev), XF86Launch4 is <I211>)
               };  // F12

    key <TLDE> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Delete  , Delete , Delete           , Delete             ], // Del
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<DELE>) , Redirect(key=<DELE>)  , // <DELE>
                   Redirect(key=<DELE>) , Redirect(key=<DELE>) ]  // <DELE>
               };  // ` ~
    key <AE01> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Pointer_Button1      , Pointer_Button1       , // LBt(††)
                   Pointer_Button1      , Pointer_Button1      ], // LBt
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   PtrBtn(button=1)     , PtrBtn(button=1)      , // PtrLBt
                   NoAction()           , NoAction()           ]
               };  // 1
    key <AE02> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Pointer_Button2      , Pointer_Button2       , // MBt(††)
                   Pointer_Button2      , Pointer_Button2      ], // MBt
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   PtrBtn(button=2)     , PtrBtn(button=2)      , // PtrMBt
                   NoAction()           , NoAction()           ]
               };  // 2
    key <AE03> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Pointer_Button3      , Pointer_Button3       , // RBt(††)
                   Pointer_Button3      , Pointer_Button3      ], // RBt
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   PtrBtn(button=3)     , PtrBtn(button=3)      , // PtrRBt
                   NoAction()           , NoAction()           ]
               };  // 3
    key <AE04> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   F4      , F4     , dollar           , sterling           ], // $£
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<FK04>,clearmods=LevelFive), Redirect(key=<FK04>,clearmods=LevelFive),
                   NoAction()           , NoAction()           ]
               };  // 4
    key <AE05> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   F5      , F5     , percent          , EuroSign           ], // %€
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<FK05>,clearmods=LevelFive), Redirect(key=<FK05>,clearmods=LevelFive),
                   NoAction()           , NoAction()           ]
               };  // 5
    key <AE06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   F6      , F6     , asciicircum      , asciicircum        ], // ^
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<FK06>,clearmods=LevelFive), Redirect(key=<FK06>,clearmods=LevelFive),
                   NoAction()           , NoAction()           ]
               };  // 6
    key <AE07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   F7      , F7     , KP_7             , U21D6              ], // KP_7 ↖ ⇖
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<FK07>,clearmods=LevelFive), Redirect(key=<FK07>,clearmods=LevelFive),
                   NoAction()           , NoAction()           ]
               };  // 7
    key <AE08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   F8      , F8     , KP_8             , U21D1              ], // KP_8 ↑ ⇑
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<FK08>,clearmods=LevelFive), Redirect(key=<FK08>,clearmods=LevelFive),
                   NoAction()           , NoAction()           ]
               };  // 8
    key <AE09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   F9      , F9     , KP_9             , U21D7              ], // KP_9 ↗ ⇗
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<FK09>,clearmods=LevelFive), Redirect(key=<FK09>,clearmods=LevelFive),
                   NoAction()           , NoAction()           ]
               };  // 9
    key <AE10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   F10     , F10    , KP_Multiply      , KP_Multiply        ], // KP_*
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<FK10>,clearmods=LevelFive), Redirect(key=<FK10>,clearmods=LevelFive),
                   NoAction()           , NoAction()           ]
               };  // 0
    key <AE11> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   F11     , F11    , KP_Subtract      , KP_Subtract        ], // KP_-
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<FK11>,clearmods=LevelFive), Redirect(key=<FK11>,clearmods=LevelFive),
                   NoAction()           , NoAction()           ]
               };  // - _
    key <AE12> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   F12     , F12    , KP_Equal         , KP_Equal           ], // KP_=
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<FK12>,clearmods=LevelFive), Redirect(key=<FK12>,clearmods=LevelFive),
                   NoAction()           , NoAction()           ]
               };  // = +

    key <AD01> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Escape               , Escape                , // Esc
                   Home                 , KP_Home              ], // Home
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<ESC>)  , Redirect(key=<ESC>)   , // <ESC>
                   Redirect(key=<HOME>) , Redirect(key=<HOME>) ]  // <HOME>
               };  // Cmk Q
    key <AD02> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Tab                  , Tab                   , // Tab
                   Up                   , KP_Up                ], //  ↑
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I166>) , Redirect(key=<I166>)  , // <I166>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // Cmk W
    key <AD03> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   XF86Find             , XF86Find              , // Find
                   End                  , KP_End               ], // End
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<AD03>,mods=Control,clearmods=LevelFive), Redirect(key=<AD03>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+F                   
                   NoAction()           , NoAction()           ]
               };  // Cmk F
    key <AD04> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   XF86Forward          , XF86Forward           , // BrFwd
                   Delete               , KP_Delete            ], // Del
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I167>) , Redirect(key=<I167>)  , // <I167>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // Cmk P
    key <AD05> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Pointer_Up           , Pointer_Up            , // PtrUp(††)
                   Escape               , Escape               ], // Esc
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   MovePtr(x=+0,y=-8)   , MovePtr(x=+0,y=-8)    , // PtrUp(††)
                   Redirect(key=<ESC>)  , Redirect(key=<ESC>)  ]  // <ESC>
               };  // Cmk G
    key <AD06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Page_Up              , Page_Up               , // PgUp
                   Page_Up              , KP_Prior             ], // PgUp
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<PGUP>) , Redirect(key=<PGUP>)  , // <PGUP>
                   Redirect(key=<PGUP>) , NoAction()           ]
               };  // Cmk J
    key <AD07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Home                 , Home                  , // Home
                   KP_4                 , U21D0                ], // KP_4 ← ⇐
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<HOME>) , Redirect(key=<HOME>)  , // <HOME>
                   NoAction()           , NoAction()           ]
               };  // Cmk L
    key <AD08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Up                   , Up                    , //  ↑
                   KP_5                 , U21D4                ], // KP_5 ↔ ⇔
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<UP>)   , Redirect(key=<UP>)    , // <UP>
                   NoAction()           , NoAction()           ]
               };  // Cmk U
    key <AD09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   End                  , End                   , // End
                   KP_6                 , U21D2                ], // KP_6 → ⇒
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<END>)  , Redirect(key=<END>)   , // <END>
                   NoAction()           , NoAction()           ]
               };  // Cmk Y
    key <AD10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Caps_Lock            , Caps_Lock             , // Del
                   KP_Add               , KP_Add               ], // KP_+
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   SetMods(mods=Lock)   , SetMods(mods=Lock)    , // Lock mod for <CAPS>
                   NoAction()           , NoAction()           ]
               };  // ; :
    key <AD11> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Escape               , Escape                , // Esc
                   parenleft            , braceleft            ], //  (
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<ESC>)  , Redirect(key=<ESC>)   , // <ESC>
                   NoAction()           , NoAction()           ]
               };  // [ {
    key <AD12> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Insert               , Insert                , // Ins
                   parenright           , braceright           ], //  )
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<INS>)  , Redirect(key=<INS>)   , // <INS>
                   NoAction()           , NoAction()           ]
               };  // ] }
    key <BKSL> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   XF86Favorites        , XF86Favorites         , // BrFav
                   backslash            , bar                  ], // BKSL
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<I164>,clearmods=all), Redirect(key=<I164>,clearmods=all), // <I164>(‡‡)
                   NoAction()           , NoAction()           ]
               };  // \ |

    key <AC01> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Alt_L                , Alt_L                 , // Alt
                   Left                 , KP_Left              ], //  ←
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   SetMods(mods=Alt)    , SetMods(mods=Alt)     , // Alt mod for <LALT>
                   NoAction()           , NoAction()           ]
               };  // Cmk A
    key <AC02> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Tab                  , Tab                   , // Tab
                   Down                 , KP_Down              ], //  ↓
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<TAB>)  , Redirect(key=<TAB>)   , // <TAB>
                   NoAction()           , NoAction()           ]
               };  // Cmk R
    key <AC03> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Shift_L              , Shift_L               , // Shift
                   Right                , KP_Right             ], //  →
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   SetMods(mods=Shift)  , SetMods(mods=Shift)   , // Shift mod for <LFSH>
                   NoAction()           , NoAction()           ]
               };  // Cmk S
    key <AC04> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Control_L            , Control_L             , // Ctrl
                   BackSpace            , BackSpace            ], // Back
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   SetMods(mods=Control) , SetMods(mods=Shift+Control) , // Control mod for <LCTL>
                   NoAction()           , NoAction()           ]
               };  // Cmk T
    key <AC05> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Pointer_Down         , Pointer_Down          , // PtrDn(††)
                   KP_Begin             , KP_Begin             ], // KP_Begin?!?
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   MovePtr(x=+0,y=+8)   , MovePtr(x=+0,y=+8)    , // PtrDn(††)
                   NoAction()           , NoAction()           ]
               };  // Cmk D
    key <AC06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Page_Down            , Page_Down             , // PgDn
                   Page_Down            , KP_Next              ], // PgDn
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<PGDN>) , Redirect(key=<PGDN>)  , // <PGDN>
                   Redirect(key=<PGDN>) , NoAction()           ]
               };  // Cmk H -> M
    key <AC07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Left                 , Left                  , //  ←
                   KP_1                 , U21D9                ], // KP_1 ↙ ⇙
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<LEFT>) , Redirect(key=<LEFT>)  , // <LEFT>
                   NoAction()           , NoAction()           ]
               };  // Cmk N
    key <AC08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Down                 , Down                  , //  ↓
                   KP_2                 , U21D3                ], // KP_2 ↓ ⇓
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<DOWN>) , Redirect(key=<DOWN>)  , // <DOWN>
                   NoAction()           , NoAction()           ]
               };  // Cmk E
    key <AC09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Right                , Right                 , //  →
                   KP_3                 , U21D8                ], // KP_3 ↘ ⇘
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<RGHT>) , Redirect(key=<RGHT>)  , // <RGHT>
                   NoAction()           , NoAction()           ]
               };  // Cmk I
    key <AC10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Delete               , Delete                , // Back
                   Delete               , Delete               ], // Del
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<DELE>) , Redirect(key=<DELE>)  , // <DELE>
                   NoAction()           , NoAction()           ]
               };  // Cmk O
    key <AC11> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Menu                 , Menu                  , // Menu
                   apostrophe           , quotedbl             ], // ' "
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<MENU>) , Redirect(key=<MENU>)  , // <MENU>/<COMP>
                   NoAction()           , NoAction()           ]
               };  // ' "

    key <LSGT> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Pointer_EnableKeys  , Pointer_EnableKeys     , // Ptr_On
                   Pointer_EnableKeys  , Pointer_EnableKeys    ]  // (Enable MouseKeys)
               };  // < >
    key <AB01> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Undo                 , Redo                  , // Undo/Redo
                   Undo                 , Redo                 ], // Undo/Redo
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
      Redirect(key=<AB01>,mods=Control,clearmods=LevelFive), Redirect(key=<AB01>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+Z
      Redirect(key=<AB01>,mods=Control,clearmods=LevelFive), Redirect(key=<AB01>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+Z
//                   Redirect(key=<UNDO>) , Redirect(key=<UNDO>) ]  // <UNDO>(‡‡) (not working?)
               };  // Z
    key <AB02> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   XF86Cut              , XF86Cut               , // Cut(§§)
                   XF86Cut              , XF86Cut              ], // Cut(§§)
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
      Redirect(key=<AB02>,mods=Control,clearmods=LevelFive), Redirect(key=<AB02>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+X
      Redirect(key=<AB02>,mods=Control,clearmods=LevelFive), Redirect(key=<AB02>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+X
//                   Redirect(key=<CUT>)  , Redirect(key=<CUT>)  ]  // <CUT>(‡‡) (not working since Ub14.04?)
               };  // X
    key <AB03> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   XF86Copy             , XF86Copy              , // Copy(§§)
                   XF86Copy             , XF86Copy             ], // Copy(§§)
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
      Redirect(key=<AB03>,mods=Control,clearmods=LevelFive), Redirect(key=<AB03>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+C
      Redirect(key=<AB03>,mods=Control,clearmods=LevelFive), Redirect(key=<AB03>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+C
//                   Redirect(key=<COPY>) , Redirect(key=<COPY>) ]  // <COPY>(‡‡) (not working since Ub14.04?)
               };  // C
    key <AB04> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   XF86Paste            , XF86Paste             , // Paste(§§)
                   XF86Paste            , XF86Paste            ], // Paste(§§)
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
      Redirect(key=<AB05>,mods=Control,clearmods=LevelFive), Redirect(key=<AB05>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+V
      Redirect(key=<AB05>,mods=Control,clearmods=LevelFive), Redirect(key=<AB05>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+V
//                   Redirect(key=<PAST>) , Redirect(key=<PAST>)  , // <PAST>(‡‡)
//                   Redirect(key=<PAST>) , Redirect(key=<PAST>) ]  // <PAST>(‡‡) (not working since Ub14.04?)
               };  // V -> D
    key <AB05> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   XF86Paste            , XF86Paste             , // Paste(§§)
                   XF86Paste            , XF86Paste            ], // Paste(§§)
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
      Redirect(key=<AB05>,mods=Control,clearmods=LevelFive), Redirect(key=<AB05>,mods=Shift+Control,clearmods=LevelFive), // Ctrl+V
      Redirect(key=<AB05>,mods=Control,clearmods=LevelFive), Redirect(key=<AB05>,mods=Shift+Control,clearmods=LevelFive)] // Ctrl+V
//                   Redirect(key=<PAST>) , Redirect(key=<PAST>)  , // <PAST>(‡‡)
//                   Redirect(key=<PAST>) , Redirect(key=<PAST>) ]  // <PAST>(‡‡) (not working since Ub14.04?)
               };  // B -> V
    key <AB06> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   NoSymbol             , NoSymbol              , // PgDn
                   Page_Down            , KP_Next              ], // PgDn
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   NoAction()           , NoAction()            , //
                   Redirect(key=<PGDN>) , NoAction()           ]
               };  // Cmk K
    key <AB07> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Backspace            , Backspace             , // RBt(††)
                   KP_0                 , U21D5                ], // KP_0 ↕ ⇕
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<BKSP>) , Redirect(key=<BKSP>)  , // <BKSP>
                   NoAction()           , NoAction()           ]
               };  // M -> H
    key <AB08> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Pointer_Left         , Pointer_Left          , // PtrLe(††)
                   comma                , semicolon            ], //  , ;
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   MovePtr(x=-8,y=+0)   , MovePtr(x=-8,y=+0)    , // PtrLe(††)
                   NoAction()           , NoAction()           ]
               };  // , <
    key <AB09> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Pointer_Right        , Pointer_Right         , // PtrRi(††)
                   KP_Decimal           , colon                ], // KP_. :
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   MovePtr(x=+8,y=+0)   , MovePtr(x=+8,y=+0)    , // PtrRi(††)
                   NoAction()           , NoAction()           ]
               };  // . >
    key <AB10> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Multi_key            , Multi_key             , // Compose
                   KP_Divide            , KP_Divide            ]  // KP_/
               };  // / ?

    key <SPCE> { symbols[Group1]=[ NoSymbol , NoSymbol , NoSymbol , NoSymbol ,
                   Return               , Return                , // Enter
                   space                , nobreakspace         ], // Space
                 actions[Group1]=[NoAction(),NoAction(),NoAction(),NoAction(),
                   Redirect(key=<RTRN>) , Redirect(key=<RTRN>)  , // <RTRN>
                   NoAction()           , NoAction()           ]
               };  // <SPCE>
//    key <CAPS> { [ NoSymbol,NoSymbol,NoSymbol,NoSymbol ] };  // CapsLock

// §§: XCV Cut/Copy/Paste seem OK in Firefox but not Gedit!? This is a GTK weakness
//     Some bind fiddling in ~/.gtkrc-2.0 and ~/.config/gtk-3.0/gtk.css can get this working
// ††: 'Pointer_'mousing needs enabling! Real KP_ keys work but not the Pointer_ mousing symbols
//    (In the Settings GUI there's a Shift+NumLock option for this, but Pointer_EnableKeys works too)
// ‡‡: Multimedia keys are in symbols/inet(evdev); this should be enabled (base rules usually handle it)
// NOTE: RedirectKey alone doesn't work for the #->FK keys; they then act as the remapped FK## (Multimedia)

// NOTE: I'm not mapping the CAPS key to lv5_switch here, as that should be done separately
//  key <CAPS> { [ ISO_Level5_Shift , BackSpace , Caps_Lock , Caps_Lock , NoSymbol ] };
//  modifier_map Mod3   { ISO_Level5_Shift };

// NOTE: Leave for the layout/options to decide which key(s) to use as switches!
//    include "level3(ralt_switch)"
//    include "level5(caps_switch)"
};
